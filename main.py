import asyncio
import os
import aiohttp
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot
from bybit_api import get_usdt_perpetual_symbols, get_kline_with_retries
from helpers import analyze_candles
from messaging import run_message_workers
from logging_config import setup_logger

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SharedState:
    def __init__(self, message_limit):
        self.message_limit = message_limit
        self.messages_sent = 0
        self.lock = asyncio.Lock()
        self.limit_reached_event = asyncio.Event()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
MESSAGE_LIMIT = int(os.getenv('MESSAGE_LIMIT', 10))  # –î–æ–±–∞–≤–ª–µ–Ω–æ

if not BOT_TOKEN or not CHAT_ID:
    raise ValueError("BOT_TOKEN –∏ CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

logger = setup_logger(log_file='app.log', level=logging.INFO)
bot = Bot(token=BOT_TOKEN)

async def process_symbol(symbol: str, intervals: dict, session: aiohttp.ClientSession,
                         semaphore: asyncio.Semaphore, message_queue: asyncio.Queue,
                         shared_state: SharedState):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
    """
    async with semaphore:
        if shared_state.limit_reached_event.is_set():
            # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return

        signals = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        for interval_key, interval_value in intervals.items():
            if shared_state.limit_reached_event.is_set():
                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return

            try:
                # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MACD (26 + 9 = 35)
                kline_data = await get_kline_with_retries(session, symbol, interval_key, limit=36)
                if not kline_data:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval_value}.")
                    continue

                fields = ['start', 'open', 'high', 'low', 'close', 'volume']
                candles = [dict(zip(fields, candle)) for candle in kline_data[:-1]]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É

                analysis = analyze_candles(candles)

                signal = analysis.get('signal')
                percent_k = analysis.get('%K')
                percent_d = analysis.get('%D')
                macd = analysis.get('MACD')

                # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                if percent_k is not None and percent_d is not None and macd is not None:
                    logger.info(f"{symbol} | {interval_value} | %K: {percent_k:.5f} | %D: {percent_d:.5f} | MACD: {macd:.7f}")
                else:
                    logger.warning(f"{symbol} | {interval_value} | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
                if signal and isinstance(percent_k, (float, int)) and isinstance(percent_d, (float, int)) and isinstance(macd, (float, int)):
                    trade_action = "üî¥ SHORT" if signal == "short" else "üü¢ LONG"

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    if symbol not in signals:
                        signals[symbol] = {
                            'intervals': [],
                            'trade_action': trade_action,
                            'percent_k': percent_k,
                            'percent_d': percent_d,
                            'macd': macd
                        }
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        signals[symbol]['percent_k'] = percent_k
                        signals[symbol]['percent_d'] = percent_d
                        signals[symbol]['macd'] = macd

                    signals[symbol]['intervals'].append(interval_value)

            except aiohttp.ClientResponseError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e.status}, {e.message}, URL: {e.request_info.url}")
            except aiohttp.ContentTypeError as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–º–≤–æ–ª–∞ {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval_value}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã
        for symbol, data in signals.items():
            if shared_state.limit_reached_event.is_set():
                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return

            intervals_text = ", ".join(data['intervals'])
            trade_action = data['trade_action']
            percent_k = data.get('percent_k')
            percent_d = data.get('percent_d')
            macd = data.get('macd')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã–µ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if not (isinstance(percent_k, (float, int)) and isinstance(percent_d, (float, int)) and isinstance(macd, (float, int))):
                logger.warning(f"–ù–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–∏—Å–ª–æ–≤—ã–µ –¥–ª—è {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {intervals_text}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                continue

            percent_k_formatted = f"{percent_k:.5f}"
            percent_d_formatted = f"{percent_d:.5f}"
            macd_formatted = f"{macd:.7f}"

            message = (
                f"üî• #{symbol}\n"
                f"üïí {intervals_text}\n"
                f"{trade_action}\n"
                f"%K: {percent_k_formatted}\n"
                f"%D: {percent_d_formatted}\n"
                f"MACD: {macd_formatted}\n"
            )

            # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            async with shared_state.lock:
                if shared_state.messages_sent >= shared_state.message_limit:
                    shared_state.limit_reached_event.set()
                    logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                    return
                shared_state.messages_sent += 1

            await message_queue.put(message)

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    is_manual_run = os.getenv("MANUAL_RUN", "false").lower() == "true"
    current_minute = datetime.now().minute

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
    intervals = {
        '5': '5m',
        '15': '15m'
    }

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
    if not is_manual_run:  # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é
        if current_minute % 15 == 0:
            intervals = {k: v for k, v in intervals.items() if k in ['15', '5']}
        elif current_minute % 5 == 0:
            intervals = {k: v for k, v in intervals.items() if k in ['5']}
        else:
            logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    MAX_CONCURRENT_TASKS = 50
    MAX_WORKERS = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)
    message_queue = asyncio.Queue()

    shared_state = SharedState(message_limit=MESSAGE_LIMIT)

    async with aiohttp.ClientSession() as session:
        symbols = await get_usdt_perpetual_symbols()
        symbols = [symbol for symbol in symbols if symbol.upper() != 'USDCUSDT']
        # logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è USDT –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {symbols}")

        if not symbols:
            await send_telegram_message(bot, CHAT_ID, "‚ùå –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç.", logger)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
        worker_task = asyncio.create_task(
            run_message_workers(
                bot,
                CHAT_ID,
                message_queue,
                logger,
                max_workers=MAX_WORKERS
            )
        )

        tasks = [
            process_symbol(symbol, intervals, session, semaphore, message_queue, shared_state)
            for symbol in symbols
        ]

        await asyncio.gather(*tasks)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è "EXIT" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
        for _ in range(MAX_WORKERS):
            await message_queue.put("EXIT")
        await worker_task

if __name__ == "__main__":
    asyncio.run(main())
